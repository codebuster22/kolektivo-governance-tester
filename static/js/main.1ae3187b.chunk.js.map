{"version":3,"sources":["../node_modules/@lit-protocol/sdk-browser/build sync","components/index.js","contracts/badgeIds.js","utils.js","createProposal.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Body","styled","div","Button","button","Container","Header","header","img","a","attrs","target","rel","monetaryBadgeIds","kolektivoBadgeIds","createPublicProposal","targetContract","methodName","params","delay","delegate","delegateBadgeId","bac","ethers","console","log","populateTransaction","populatedTransactionOfTargetContract","undefined","data","to","value","BigNumber","from","execTransactionFromModule","populatedTransactionOfDelay","connect","tx","wait","receipt","queueIndex","events","filter","event","args","createPrivateProposal","badger","badgeIds","client","LitJsSdk","LitNodeClient","window","litNodeClient","salt","getSecretTransactionHash","privateTrxHash","utils","solidityKeccak256","privateProposal","operation","concatenatedUserAddress","concatendatedBadgeIds","i","length","accessControlConditions","contractAddress","address","standardContractType","chain","method","parameters","returnValueTest","comparator","checkAndSignAuthMessage","authSig","encryptString","JSON","stringify","encryptedString","symmetricKey","saveEncryptionKey","encryptedSymmetricKey","uint8arrayToString","jsonFileName","pinFile","encryptedTransactionProposalCid","proposalToPin","encryptedDataPin","name","pinJson","ipfsURI","enqueueSecretTx","file","FormData","append","filename","contentType","get","metadata","axios","post","maxBodyLength","headers","pinata_api_key","process","pinata_secret_api_key","res","IpfsHash","jsonData","pinataOptions","cidVersion","pinataMetadata","keyvalues","customKey","customKey2","pinataContent","config","url","Authorization","createTreasuryProposal","isSecret","signer","getAddress","signerAddress","error","message","kolektivoDelay","Contract","contracts","SecretDelay","bacK","BACRoles","treasuryContract","ITreasury","kolektivoBadger","Badger","treasuryDelegateBadgeId","balanceOf","eq","erc20Address","createReserveProposal","monetaryDelay","bacMD","reserveContract","IReserve","monetaryBadger","reserveDelegateBadgeId","vetoProposalsOnKolektivoDelay","newTrxNonce","treasuryVetoDelegateBadgeId","vetoTransactionsTill","populatedSecretDelayTransaction","alert","vetoProposalsOnMonetaryDelay","reserveVetoDelegateBadgeId","getMonetaryDelayQueuePointer","monetaryDelayInstance","queuePointer","parseInt","toString","getKolektivoDelayQueuePointer","WalletButton","useState","rendered","setRendered","ens","useLookupAddress","useEthers","account","activateBrowserWallet","deactivate","useEffect","shortenAddress","onClick","createTreasuryPublicProposal","web3Provider","getSigner","createTreasuryPrivateProposal","createReservePublicProposal","createReservePrivateProposal","vetoProposalOnTreasury","vetoProposalOnReserve","getMonetaryQueuePointer","getKolektivoQueuePointer","App","selectedState","setSelectedState","indexToVetoOnReserve","setIndexToVetoOnReserve","indexToVetoOnTreasury","setIndexToVetoOnTreasury","monetaryQueuePointer","setMonetaryQueuePointer","kolektivoQueuePointer","setKolektivoQueuePointer","library","getQueuePointers","mQueuePointer","kQueuePointer","currentSelectedState","vetoIndex","Form","Select","onChange","Label","htmlFor","Control","type","readOnlyChainId","Mainnet","chainId","readOnlyUrls","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","StrictMode","DAppProvider","ApolloProvider","document","getElementById"],"mappings":"yOAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,CACP,CACAF,EAAoBK,KAAO,WAAa,MAAO,EAAI,EACnDL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,G,sOCNZC,EAAOC,IAAOC,IAAG,qMAUjBC,EAASF,IAAOG,OAAM,wPAatBC,EAAYJ,IAAOC,IAAG,+HAOtBI,EAASL,IAAOM,OAAM,gM,GAUdN,IAAOO,IAAG,gGAMXP,IAAOQ,EAAEC,MAAM,CACjCC,OAAQ,SACRC,IAAK,uBAFaX,CAGlB,mE,wBCnDWY,EAES,EAFTA,EAGc,EAHdA,EAQe,EAMfC,EACU,IADVA,EAEe,IAFfA,EAImB,I,mCCPnBC,EAAoB,iDAAG,WAClCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAM,+FAQN,OANAC,QAAQC,IAAI,iDAMZ,UACmD,EAAAT,EAAeU,qBAChET,GACD,oBAAIC,IAAQ,KAAD,EAMZ,GARMS,EAAoC,OAI1CH,QAAQC,IACN,0HAKyCG,IAAzCD,QAC8CC,IAA9CD,EAAqCE,WACOD,IAA5CD,EAAqCG,GAAgB,sBAE/CrC,MAAM,yDAAyD,KAAD,EAStE,YAPmDmC,IAA/CD,EAAqCI,QACvCJ,EAAqCI,MAAQR,EAAOS,UAAUC,KAAK,IAMrE,UAC0Cd,EAAMO,oBAAoBQ,0BAClEP,EAAqCG,GACrCH,EAAqCI,MACrCJ,EAAqCE,KA9CvB,GAgDd,KAAD,GALgC,QAQCD,KAR5BO,EAA2B,cASMP,IAArCO,EAA4BN,WACOD,IAAnCO,EAA4BL,GAAgB,uBAEtCrC,MAAM,sDAAsD,KAAD,GAWnE,YAT0CmC,IAAtCO,EAA4BJ,QAC9BI,EAA4BJ,MAAQR,EAAOS,UAAUC,KAAK,IAG5DT,QAAQC,IAAI,2DAKZ,UACiBH,EACdc,QAAQhB,GACRc,0BACCC,EAA4BL,GAC5BK,EAA4BJ,MAC5BI,EAA4BN,KAxEhB,EA0EZR,GACA,KAAD,GARK,OAAFgB,EAAE,iBAScA,EAAGC,OAAO,KAAD,GAM/B,GANMC,EAAO,OAEPC,EAA2B,QAAjB,EAAGD,EAAQE,cAAM,OAExB,QAFwB,EAAd,EAAgBC,QACjC,SAACC,GAAK,MAAqB,qBAAhBA,EAAMA,KAA4B,IAC7C,GAAGC,YAAI,WAFwB,EAAd,EAERJ,YAGPD,EAAQ,CAAD,gBACgD,OAAzDf,QAAQC,IAAI,6CAA6C,kBAClD,CACLE,uCACAa,eACD,cAEK/C,MAAM,sBAAsB,KAAD,uCAEpC,gBA1FgC,oDA4FpBoD,EAAqB,iDAAG,WACnC7B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAuB,EACAC,GAAQ,iIAEmC,OAArCC,EAAS,IAAIC,IAASC,cAAgB,EAAD,OACrCF,EAAOZ,UAAU,KAAD,EAOuC,OAN7De,OAAOC,cAAgBJ,EAMvBxB,QAAQC,IAAI,iDAAiD,UACV,EAAAT,EAAeU,qBAChET,GACD,oBAAIC,IAAQ,KAAD,EAF8B,QAMCU,KANrCD,EAAoC,cAOMC,IAA9CD,EAAqCE,WACOD,IAA5CD,EAAqCG,GAAgB,uBAE/CrC,MAAM,yDAAyD,KAAD,GAQtE,YANmDmC,IAA/CD,EAAqCI,QACvCJ,EAAqCI,MAAQR,EAAOS,UAAUC,KAAK,IAGrET,QAAQC,IAAI,4CAEZ,UACmBN,EAAMkC,OAAO,KAAD,GAArB,OAAJA,EAAI,iBAKmBlC,EAAMmC,yBACjC3B,EAAqCG,GACrCH,EAAqCI,MACrCJ,EAAqCE,KA9IvB,EAgJdwB,GACA,KAAD,GAmCD,IAzCME,EAAc,OAWchC,EAAOiC,MAAMC,kBAC7C,CAAC,UAAW,UAAW,QAAS,QAAS,WACzC,CACE9B,EAAqCG,GACrCH,EAAqCI,MACrCJ,EAAqCE,KA3JzB,EA6JZwB,IAcEK,EAAkB,CACtB5B,GAAIH,EAAqCG,GACzCC,MAAOJ,EAAqCI,MAC5CF,KAAMF,EAAqCE,KAC3C8B,UA/Kc,EAgLdN,KAAMA,GAEJO,EAA0B,GAC1BC,EAAwB,GACnBC,EAAI,EAAGA,EAAIf,EAASgB,OAAQD,IAC/BA,IAAMf,EAASgB,OAAS,GAC1BH,EAAuB,UAAMA,EAAuB,gBACpDC,EAAqB,UAAMA,GAAqB,OAAGd,EAASe,MAE5DF,EAAuB,UAAMA,EAAuB,iBACpDC,EAAqB,UAAMA,GAAqB,OAAGd,EAASe,GAAE,MAiBjE,OAZKE,EAA0B,CAC9B,CACEC,gBAAiBnB,EAAOoB,QACxBC,qBAAsB,UACtBC,MAAO,OACPC,OAAQ,iBACRC,WAAY,CAACV,EAAyBC,GACtCU,gBAAiB,CACfC,WAAY,IACZzC,MAAO,OAGX,EAAD,QAEqBkB,IAASwB,wBAAwB,CAAEL,MAAO,SAAU,KAAD,GAA5D,OAAPM,EAAO,iBAEmCzB,IAAS0B,cACvDC,KAAKC,UAAUnB,IACf,KAAD,GAEmB,OAFnB,SAFOoB,EAAe,EAAfA,gBAAiBC,EAAY,EAAZA,aAIX,OAAO,EAAD,QACgB/B,EAAOgC,kBAAkB,CAC3DhB,0BACAe,eACAL,UACAN,MALY,SAMX,KAAD,GAO2C,OAZvCa,EAAqB,OAOShC,IAASiC,mBAC3CD,EACA,UAGIE,EAAY,2BAAuB9B,GAAI,UAEC+B,EAC5CN,EACAK,GACA,KAAD,GAOD,OAVME,EAA+B,OAK/BC,EAAgB,CACpBC,iBAAkBF,EAClBG,KAAML,GAGR,UACsBM,EAAQH,EAAeH,GAAc,KAAD,GAA7C,OAAPO,EAAO,iBAM6BvE,EAAMO,oBAAoBiE,gBAClEpC,EACAmC,GACA,KAAD,GAHgC,QAMC9D,KAN5BO,EAA2B,cAOMP,IAArCO,EAA4BN,WACOD,IAAnCO,EAA4BL,GAAgB,uBAEtCrC,MAAM,sDAAsD,KAAD,GASnE,YAP0CmC,IAAtCO,EAA4BJ,QAC9BI,EAA4BJ,MAAQR,EAAOS,UAAUC,KAAK,IAM5D,UACiBX,EACdc,QAAQhB,GACRc,0BACCC,EAA4BL,GAC5BK,EAA4BJ,MAC5BI,EAA4BN,KA5QhB,EA8QZR,GACA,KAAD,GARK,OAAFgB,EAAE,iBAScA,EAAGC,OAAO,KAAD,GAM/B,GANMC,EAAO,OAEPC,EAA2B,QAAjB,EAAGD,EAAQE,cAAM,OAExB,QAFwB,EAAd,EAAgBC,QACjC,SAACC,GAAK,MAAqB,2BAAhBA,EAAMA,KAAkC,IACnD,GAAGC,YAAI,WAFwB,EAAd,EAERJ,YAGPD,EAAQ,CAAD,gBAC+B,OAAxCf,QAAQC,IAAI,4BAA4B,kBACjC,CACLE,uCACA0B,OACAb,eACD,cAEK/C,MAAM,sBAAsB,KAAD,uCAEpC,gBAnMiC,wDAqM5B2F,EAAO,iDAAG,WAAOQ,EAAMJ,GAAI,qFAWS,MAV/B,kDACL3D,EAAO,IAAIgE,UACVC,OAAO,OAAQF,EAAM,CACxBG,SAAU,eACVC,YAAa,6BAEfxE,QAAQC,IAAII,EAAKoE,IAAI,SACfC,EAAWtB,KAAKC,UAAU,CAC9BW,KAAMA,IAER3D,EAAKiE,OAAO,iBAAkBI,GAAU,SACtBC,IAAMC,KAXf,iDAWyBvE,EAAM,CACtCwE,cAAe,WACfC,QAAS,CACP,eAAgB,sBAChBC,eAAgBC,uBAChBC,sBAAuBD,sEAExB,KAAD,EAC2D,OARvDE,EAAG,OAQTlF,QAAQC,IAAI,6BAA8BiF,EAAI7E,KAAK8E,UAAU,kBACtDD,EAAI7E,KAAK8E,UAAQ,4CACzB,gBAtBY,wCAwBAlB,EAAO,iDAAG,WAAOmB,EAAUpB,GAAI,qFAsBzC,OArBK3D,EAAO+C,KAAKC,UAAU,CAC1BgC,cAAe,CACbC,WAAY,GAEdC,eAAgB,CACdvB,KAAMA,EACNwB,UAAW,CACTC,UAAW,cACXC,WAAY,iBAGhBC,cAAeP,IAEXQ,EAAS,CACb/C,OAAQ,OACRgD,IAAK,iDACLf,QAAS,CACP,eAAgB,mBAChBgB,cAAc,UAAD,OAAYd,qoBAE3B3E,KAAMA,GACN,EAAD,OACiBsE,YAAMiB,GAAQ,KAAD,EACoB,OAD7CV,EAAG,OACTlF,QAAQC,IAAI,mBAAoBiF,EAAI7E,KAAK8E,UAAU,kBAC5CD,EAAI7E,KAAK8E,UAAQ,2CACzB,gBA1BmB,wC,QCrTPY,EAAsB,iDAAG,WAAOC,EAAUC,GAAM,wHAGnCA,EAAOC,aAAa,KAAD,EAAzCC,EAAa,OACbnG,QAAQC,IAAIkG,GAAe,uBAEV,MAFU,yBAE3BnG,QAAQoG,MAAM,EAAD,IACPnI,MAAM,sBAAsB,KAAD,GAuCnC,OAjCMoI,EAAUL,EACZ,gDACA,gDACJhG,QAAQC,IAAIoG,GAINC,EAAiB,IAAIvG,IAAOwG,SAChCC,IAAUF,eAAe5D,QACzB+D,IACAR,GAIIS,EAAO,IAAI3G,IAAOwG,SAASC,IAAUE,KAAKhE,QAASiE,IAAUV,GAG7DW,EAAmB,IAAI7G,IAAOwG,SAjCN,6CAmC5BM,IACAZ,GAIIa,EAAkB,IAAI/G,IAAOwG,SACjCC,IAAUM,gBAAgBpE,QAC1BqE,IACAd,GAIIe,EAA0B1H,EAEhC,UAC6CwH,EAAgBG,UAC3Dd,EACAa,GACA,KAAD,GAHmC,WAIDE,GAAG,GAAG,CAAD,sBAChCjJ,MAAM,+CAA+C,KAAD,GAMa,GADnEkJ,EAAe,6CACO,8CAExBnB,EAAS,CAAD,iCACJ3E,EACJuF,EACA,gBACA,CAACO,EANuB,6CAMY,EAAG,GACvCb,EACAL,EACAe,EACAN,EACA3G,IACA+G,EACA,CACExH,EACAA,EACAA,IAEF,KAAD,sDAGGC,EACJqH,EACA,kBACA,CAACO,GACDb,EACAL,EACAe,EACAN,EACA3G,KACA,KAAD,oDACF,gBAzFkC,wCA2FtBqH,EAAqB,iDAAG,WAAOpB,EAAUC,GAAM,wHAGlCA,EAAOC,aAAa,KAAD,EAAzCC,EAAa,OACbnG,QAAQC,IAAIkG,GAAe,uBAEV,MAFU,yBAE3BnG,QAAQoG,MAAM,EAAD,IACPnI,MAAM,sBAAsB,KAAD,GAuCnC,OAjCMoI,EAAUL,EACZ,gDACA,gDACJhG,QAAQC,IAAIoG,GAINgB,EAAgB,IAAItH,IAAOwG,SAC/BC,IAAUa,cAAc3E,QACxB+D,IACAR,GAIIqB,EAAQ,IAAIvH,IAAOwG,SAASC,IAAUc,MAAM5E,QAASiE,IAAUV,GAG/DsB,EAAkB,IAAIxH,IAAOwG,SA3HN,6CA6H3BiB,IACAvB,GAIIwB,EAAiB,IAAI1H,IAAOwG,SAChCC,IAAUiB,eAAe/E,QACzBqE,IACAd,GAIIyB,EAAyBrI,EAE/B,UAC4CoI,EAAeR,UACzDd,EACAuB,GACA,KAAD,GAHkC,WAIDR,GAAG,GAAG,CAAD,sBAC/BjJ,MAAM,8CAA8C,KAAD,GAMa,GADlEkJ,EAAe,6CACM,8CAEvBnB,EAAS,CAAD,iCACJ3E,EACJkG,EACA,gBACA,CAACJ,EANsB,6CAMY,EAAG,GACtCE,EACApB,EACAyB,EACAJ,EACAvH,IACA0H,EACA,CACEpI,EACAA,EACAA,IAEF,KAAD,sDAGGE,EACJgI,EACA,kBACA,CAACJ,GACDE,EACApB,EACAyB,EACAJ,EACAvH,KACA,KAAD,oDACF,gBAzFiC,wCA2FrB4H,EAA6B,iDAAG,WAAO1B,EAAQ2B,GAAW,sHAG7C3B,EAAOC,aAAa,KAAD,EAAzCC,EAAa,OACbnG,QAAQC,IAAIkG,GAAe,uBAEV,MAFU,yBAE3BnG,QAAQoG,MAAM,EAAD,IACPnI,MAAM,sBAAsB,KAAD,GAwBnC,OAnBMqI,EAAiB,IAAIvG,IAAOwG,SAChCC,IAAUF,eAAe5D,QACzB+D,IACAR,GAIIS,EAAO,IAAI3G,IAAOwG,SAASC,IAAUE,KAAKhE,QAASiE,IAAUV,GAG7Da,EAAkB,IAAI/G,IAAOwG,SACjCC,IAAUM,gBAAgBpE,QAC1BqE,IACAd,GAII4B,EAA8BvI,EAEpC,UAC6CwH,EAAgBG,UAC3Dd,EACA0B,GACA,KAAD,GAHmC,WAIDX,GAAG,GAAG,CAAD,sBAChCjJ,MAAM,+CAA+C,KAAD,oBAGdqI,EAAepG,oBAAoB4H,qBAC/EF,GACA,KAAD,GACgE,OAH3DG,EAA+B,QAGLxH,MAAQR,IAAOS,UAAUC,KAAK,GAAG,UAEhDiG,EAAKhG,0BACpBqH,EAAgCzH,GAChCyH,EAAgCxH,MAChCwH,EAAgC1H,KAChC,EACAwH,GACA,KAAD,GANO,OAAFhH,EAAE,iBAQcA,EAAGC,OAAO,KAAD,GAAlB,WAED,CAAD,gBACTkH,MAAM,UAAU,wBAED,MAAfA,MAAM,SACA/J,MAAM,sBAAsB,KAAD,oDAEpC,gBA7DyC,wCA+D7BgK,EAA4B,iDAAG,WAAOhC,EAAQ2B,GAAW,sHAG5C3B,EAAOC,aAAa,KAAD,EAAzCC,EAAa,OACbnG,QAAQC,IAAIkG,GAAe,uBAEV,MAFU,yBAE3BnG,QAAQoG,MAAM,EAAD,IACPnI,MAAM,sBAAsB,KAAD,GAwBnC,OAnBMoJ,EAAgB,IAAItH,IAAOwG,SAC/BC,IAAUa,cAAc3E,QACxB+D,IACAR,GAIIqB,EAAQ,IAAIvH,IAAOwG,SAASC,IAAUc,MAAM5E,QAASiE,IAAUV,GAG/DwB,EAAiB,IAAI1H,IAAOwG,SAChCC,IAAUiB,eAAe/E,QACzBqE,IACAd,GAIIiC,EAA6B7I,EAEnC,UAC4CoI,EAAeR,UACzDd,EACA+B,GACA,KAAD,GAHkC,WAIDhB,GAAG,GAAG,CAAD,sBAC/BjJ,MAAM,8CAA8C,KAAD,oBAGboJ,EAAcnH,oBAAoB4H,qBAC9EF,GACA,KAAD,GACgE,OAH3DG,EAA+B,QAGLxH,MAAQR,IAAOS,UAAUC,KAAK,GAAG,UAEhD6G,EAAM5G,0BACrBqH,EAAgCzH,GAChCyH,EAAgCxH,MAChCwH,EAAgC1H,KAChC,EACA6H,GACA,KAAD,GANO,OAAFrH,EAAE,iBAQcA,EAAGC,OAAO,KAAD,GAAlB,WAED,CAAD,gBACTkH,MAAM,UAAU,wBAED,MAAfA,MAAM,SACA/J,MAAM,sBAAsB,KAAD,oDAEpC,gBA7DwC,wCA+D5BkK,EAA4B,iDAAG,WAAOlC,GAAM,8GAG/BA,EAAOC,aAAa,KAAD,EAAzCC,EAAa,sDAEbnG,QAAQoG,MAAM,EAAD,IAAI,OAMlB,OAJKgC,EAAwB,IAAIrI,IAAOwG,SACvCC,IAAUa,cAAc3E,QACxB+D,IACAR,GACA,EAAD,QAC0BmC,EAAsBC,aAAa,CAC5D5H,KAAM0F,IACL,KAAD,GAFgB,OAAZkC,EAAY,yBAGXC,SAASD,EAAaE,aAAW,yDACzC,gBAhBwC,sCAkB5BC,GAA6B,iDAAG,WAAOvC,GAAM,8GAGhCA,EAAOC,aAAa,KAAD,EAAzCC,EAAa,sDAEbnG,QAAQoG,MAAM,EAAD,IAAI,OAMlB,OAJKE,EAAiB,IAAIvG,IAAOwG,SAChCC,IAAUF,eAAe5D,QACzB+D,IACAR,GACA,EAAD,QAC0BK,EAAe+B,aAAa,CACrD5H,KAAM0F,IACL,KAAD,GAFgB,OAAZkC,EAAY,yBAGXC,SAASD,EAAaE,aAAW,yDACzC,gBAhByC,sC,SClU1C,SAASE,KACP,MAAgCC,mBAAS,IAAG,mBAArCC,EAAQ,KAAEC,EAAW,KAEpBC,EAAQC,cAARD,IACR,EAA8DE,cAAtDC,EAAO,EAAPA,QAASC,EAAqB,EAArBA,sBAAuBC,EAAU,EAAVA,WAAY9C,EAAK,EAALA,MAkBpD,OAhBA+C,qBAAU,WAENP,EADEC,IAEOG,EACGI,YAAeJ,GAEf,IAEhB,GAAG,CAACA,EAASH,EAAKD,IAElBO,qBAAU,WACJ/C,GACFpG,QAAQoG,MAAM,iCAAkCA,EAAMC,QAE1D,GAAG,CAACD,IAGF,gBAACzH,EAAM,CACL0K,QAAS,WACFL,EAGHE,IAFAD,GAIJ,EAAE,UAEY,KAAbN,GAAmB,iBACN,KAAbA,GAAmBA,IAG1B,CAkJC,SAEcW,GAA6B,GAAD,8CAM1C,OAN0C,mCAA3C,WAA4CC,GAAY,iFACd,QACzBnJ,KADT6F,EAASsD,EAAaC,aACJ,iEAGlBzD,GAAuB,EAAOE,GAAQ,KAAD,uCAC5C,+BAEcwD,GAA8B,GAAD,8CAM3C,OAN2C,mCAA5C,WAA6CF,GAAY,iFACf,QACzBnJ,KADT6F,EAASsD,EAAaC,aACJ,iEAGlBzD,GAAuB,EAAME,GAAQ,KAAD,uCAC3C,+BAEcyD,GAA4B,GAAD,8CAMzC,OANyC,mCAA1C,WAA2CH,GAAY,iFACb,QACzBnJ,KADT6F,EAASsD,EAAaC,aACJ,iEAGlBpC,GAAsB,EAAOnB,GAAQ,KAAD,uCAC3C,+BAEc0D,GAA6B,GAAD,8CAM1C,OAN0C,mCAA3C,WAA4CJ,GAAY,iFACd,QACzBnJ,KADT6F,EAASsD,EAAaC,aACJ,iEAGlBpC,GAAsB,EAAMnB,GAAQ,KAAD,uCAC1C,+BAEc2D,GAAuB,EAAD,iDAMpC,OANoC,mCAArC,WAAsCL,EAAc3B,GAAW,iFACrB,QACzBxH,KADT6F,EAASsD,EAAaC,aACJ,iEAGlB7B,EAA8B1B,EAAQ2B,GAAa,KAAD,uCACzD,+BAEciC,GAAsB,EAAD,iDAMnC,OANmC,mCAApC,WAAqCN,EAAc3B,GAAW,iFACpB,QACzBxH,KADT6F,EAASsD,EAAaC,aACJ,iEAGlBvB,EAA6BhC,EAAQ2B,GAAa,KAAD,uCACxD,+BAEckC,GAAwB,GAAD,8CAWrC,OAXqC,mCAAtC,WAAuCP,GAAY,iFACT,QACzBnJ,KADT6F,EAASsD,EAAaC,aACJ,0EAITrB,EAA6BlC,GAAQ,KAAD,0CAElC,OAFkC,yBAEjDjG,QAAQC,IAAI,EAAD,IAAI,mBACR,GAAK,0DAEf,+BAEc8J,GAAyB,GAAD,8CAWtC,OAXsC,mCAAvC,WAAwCR,GAAY,iFACV,QACzBnJ,KADT6F,EAASsD,EAAaC,aACJ,0EAIThB,GAA8BvC,GAAQ,KAAD,0CAEnC,OAFmC,yBAElDjG,QAAQC,IAAI,EAAD,IAAI,mBACR,GAAK,0DAEf,sBAEc+J,OA5Nf,WACE,MAA0CtB,qBAAU,mBAA7CuB,EAAa,KAAEC,EAAgB,KACtC,EAAwDxB,mBAAS,GAAE,mBAA5DyB,EAAoB,KAAEC,EAAuB,KACpD,EAA0D1B,mBAAS,GAAE,mBAA9D2B,EAAqB,KAAEC,EAAwB,KACtD,EAAwD5B,mBAAS,GAAE,mBAA5D6B,EAAoB,KAAEC,EAAuB,KACpD,EAA0D9B,mBAAS,GAAE,mBAA9D+B,EAAqB,KAAEC,EAAwB,KACrCnB,EAAiBR,cAA1B4B,QAERxB,qBAAU,WACQ,OAAZI,QAAY,IAAZA,KAAcC,WAChBoB,GAEJ,GAAG,CAACrB,IAEJ,IAAMqB,EAAgB,iDAAG,gHACKd,GAAwBP,GAAc,KAAD,EAA9C,OAAbsB,EAAa,gBACSd,GAAyBR,GAAc,KAAD,EAA/C,GAAbuB,EAAa,OACfD,EAAc,CAAC,EAAF,iDAGbC,EAAc,CAAC,EAAF,gDAGjBN,EAAwBK,GACxBH,EAAyBI,GAAe,4CACzC,kBAXqB,mCAkBO,aAgB5B,OAhB4B,kCAA7B,8FACQC,EAAuBd,EAAc,EAAD,GAClCc,EAAoB,OACrB,MADqB,KAClB,EAGH,MAHG,KAGA,EAGH,MAHG,KAGA,GAGH,MAHG,KAGA,mCARAzB,GAA6BC,GAAc,KAAD,EAGE,KAAD,EAGD,KAAD,GAGE,KAAD,+BATA,uBAG1CE,GAA8BF,GAAa,yBAG3CG,GAA4BH,GAAa,yBAGzCI,GAA6BJ,GAAa,6CAGrD,sBAYkC,aAMlC,OANkC,kCAAnC,8FAEE,OADMyB,EAAYb,EAAuB,EACzC,SACMN,GAAsBN,EAAcyB,GAAW,KAAD,EAEpDZ,EAAwB,GAAG,4CAC5B,sBAEmC,aAMnC,OANmC,kCAApC,8FAEE,OADMY,EAAYX,EAAwB,EAC1C,SACMT,GAAuBL,EAAcyB,GAAW,KAAD,EAErDV,EAAyB,GAAG,4CAC7B,sBAED,OACE,gBAACzL,EAAS,WACR,eAACC,EAAM,UACL,eAAC2J,GAAY,MAEf,gBAACjK,EAAI,WACH,uCACE,gBAACyM,EAAA,EAAKC,OAAM,CACV,aAAW,yBACXC,SA1DV,SAA6BhK,GAC3B,IAAMZ,EAAQY,EAAMhC,OAAOoB,MAC3B2J,EAAiB3J,EACnB,EAuDwC,UAE9B,yEACA,yBAAQA,MAAM,IAAG,iFAIjB,yBAAQA,MAAM,IAAG,gFAGjB,yBAAQA,MAAM,IAAG,+EAGjB,yBAAQA,MAAM,IAAG,iFAInB,yBAAQ8I,QAxEf,WAE4B,gCAsEW,uBAElC,uCACE,+EACgDkB,KAEhD,+EACgD,IAC7CE,QAGL,uCACE,eAACQ,EAAA,EAAKG,MAAK,CAACC,QAAQ,yBAAwB,uCAG5C,eAACJ,EAAA,EAAKK,QAAO,CACXC,KAAK,SACLhN,GAAG,yBACHgC,MAAO4J,EACPgB,SAvEV,SAA2ChK,GACzC,IAAMZ,EAAQY,EAAMhC,OAAOoB,MAC3B6J,EAAwB7J,EAC1B,IAsEQ,yBAAQ8I,QAjEf,WAEkC,gCA+DW,gDAIxC,uCACE,eAAC4B,EAAA,EAAKG,MAAK,CAACC,QAAQ,0BAAyB,uCAG7C,eAACJ,EAAA,EAAKK,QAAO,CACXC,KAAK,SACLhN,GAAG,0BACHgC,MAAO8J,EACPc,SAhFV,SAA2ChK,GACzC,IAAMZ,EAAQY,EAAMhC,OAAOoB,MAC3B+J,EAAyB/J,EAC3B,IA+EQ,yBAAQ8I,QAvEf,WAEmC,gCAqEW,sDAOjD,EC3LMzD,GAAS,CACb4F,gBAAiBC,IAAQC,QACzBC,aAAa,eACVF,IAAQC,QAAU,kEAMjBlK,GAAS,IAAIoK,IAAa,CAC9BC,MAAO,IAAIC,IACXC,IAAK,qEAGPC,IAASC,OACP,eAAC,IAAMC,WAAU,UACf,eAACC,EAAA,EAAY,CAACvG,OAAQA,GAAO,SAC3B,eAACwG,EAAA,EAAc,CAAC5K,OAAQA,GAAO,SAC7B,eAAC,GAAG,UAIV6K,SAASC,eAAe,Q","file":"static/js/main.1ae3187b.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 353;","import styled from \"styled-components\";\n\nexport const Body = styled.div`\n  align-items: center;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  justify-content: center;\n  margin-top: 40px;\n`;\n\nexport const Button = styled.button`\n  background-color: white;\n  border: none;\n  border-radius: 8px;\n  color: #282c34;\n  cursor: pointer;\n  font-size: 16px;\n  margin: 0px 20px;\n  padding: 12px 24px;\n  text-align: center;\n  text-decoration: none;\n`;\n\nexport const Container = styled.div`\n  background-color: #282c34;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh);\n`;\n\nexport const Header = styled.header`\n  align-items: center;\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  min-height: 70px;\n`;\n\nexport const Image = styled.img`\n  height: 40vmin;\n  margin-bottom: 16px;\n  pointer-events: none;\n`;\n\nexport const Link = styled.a.attrs({\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n})`\n  color: #61dafb;\n  margin-top: 8px;\n`;\n","export const monetaryBadgeIds = {\n    LOCAL_MULTI_SIG_CONTROLLER_BADGE: 1,\n    RESERVE_DELEGATE: 2,\n    RESERVE_VETO_DELEGATE: 3,\n    TOPOLOGY_DELEGATE: 4,\n    FOOD_FOREST_ECOLOGY_DELEGATE: 5,\n    WEATHER_STATION_ECOLOGY_DELEGATE: 6,\n    RESERVE_ARBITRAGEUR: 7,\n    LOCAL_MULTI_SIG_MEMBER: 8,\n    FOOD_FOREST_MULTI_SIG_MEMBER: 9,\n    ECOLOGY_DELEGATE_PROPOSER: 10,\n  };\n  \n  // badges and associated roles used on kolektivo badger (global)\nexport const kolektivoBadgeIds = {\n    TREASURY_DELEGATE: 101,\n    TREASURY_VETO_DELEGATE: 102,\n    TREASURY_ARBITRAGEUR: 103,\n    KOLEKTIVO_MULTI_SIG_MEMBER: 104,\n  };","import LitJsSdk from \"@lit-protocol/sdk-browser\";\nimport axios from \"axios\";\n\n// value of `operation` is always fixed\n// for info:\n//      opertaion = 0, means CALL\n//      operation = 1, measn delegate call\n// in our current scope, we will always have operation = 0\n// for both, public and private proposal, operation = 0\nconst operation = 0;\n\nexport const createPublicProposal = async (\n  targetContract,\n  methodName,\n  params,\n  delay,\n  delegate,\n  delegateBadgeId,\n  bac,\n  ethers\n) => {\n  console.log(\"Data collected and populating transaction now\");\n\n  // step 1. generate populated transaction object of target contract\n  // populate transaction for target contract to get data\n  // invoke the target contract, how you normally do, with just one additional thing\n  // normal - targetContract.targetFunction(...args[, overrides]);\n  // here, add one thing - targetContract.populateTransaction.targetFunction(...args[, overrides]);\n  const populatedTransactionOfTargetContract = await targetContract.populateTransaction[\n    methodName\n  ](...params);\n\n  console.log(\n    \"Generated populated trasnaction of target contract, generating populated transaction of Secret Delay for proposal\"\n  );\n\n  // performing check to resolve the typescript error of populatedTransactionOfTargetContract being undefined\n  if (\n    populatedTransactionOfTargetContract === undefined ||\n    populatedTransactionOfTargetContract.data === undefined ||\n    populatedTransactionOfTargetContract.to === undefined\n  ) {\n    throw Error(\"Populated Transaction of target contract is undefined\");\n  }\n  if (populatedTransactionOfTargetContract.value === undefined) {\n    populatedTransactionOfTargetContract.value = ethers.BigNumber.from(0);\n  }\n\n  // step 2. generate populated transaction object of secret delay\n  /// create params to be passed on to BAC to add proposal\n  // same thing as done above for target contract, but this time, it's secret delay instead of target contract\n  // execTransactionFromModule - used to create public proposal\n  const populatedTransactionOfDelay = await delay.populateTransaction.execTransactionFromModule(\n    populatedTransactionOfTargetContract.to,\n    populatedTransactionOfTargetContract.value,\n    populatedTransactionOfTargetContract.data,\n    operation\n  );\n  // performing check to resolve the typescript error of populatedTransactionOfDelay being undefined\n  if (\n    populatedTransactionOfDelay === undefined ||\n    populatedTransactionOfDelay.data === undefined ||\n    populatedTransactionOfDelay.to === undefined\n  ) {\n    throw Error(\"Populated Transaction of Secret Delay is undefined\");\n  }\n  if (populatedTransactionOfDelay.value === undefined) {\n    populatedTransactionOfDelay.value = ethers.BigNumber.from(0);\n  }\n\n  console.log(\"Generated delay data, creating proposal at Secret Delay\");\n\n  // step 3. this is the final step in creating public proposal\n  //    invoke `execTransactionFromModule` with defined parameters\n  //    it will tell BAC to add proposal to queue at Secret Delay\n  //    a check is performed at BAC, that only specified delegate is allowed to add proposals\n  const tx = await bac\n    .connect(delegate)\n    .execTransactionFromModule(\n      populatedTransactionOfDelay.to,\n      populatedTransactionOfDelay.value,\n      populatedTransactionOfDelay.data,\n      operation,\n      delegateBadgeId\n    );\n  const receipt = await tx.wait();\n\n  const queueIndex = receipt.events?.filter(\n    (event) => event.event === \"TransactionAdded\"\n  )[0].args?.queueIndex;\n\n  // step 4. go out and enjoy life\n  if (receipt) {\n    console.log(\"Congratulations!! Public proposal created\");\n    return {\n      populatedTransactionOfTargetContract,\n      queueIndex,\n    };\n  } else {\n    throw Error(\"Transaction failed\");\n  }\n};\n\nexport const createPrivateProposal = async (\n  targetContract,\n  methodName,\n  params,\n  delay,\n  delegate,\n  delegateBadgeId,\n  bac,\n  ethers,\n  badger,\n  badgeIds\n) => {\n  const client = new LitJsSdk.LitNodeClient();\n  await client.connect();\n  window.litNodeClient = client;\n  // step 1. generate populated transaction object of target contract\n  // populate transaction for target contract to get data\n  // invoke the target contract, how you normally do, with just one additional thing\n  // normal - targetContract.targetFunction(...args[, overrides]);\n  // here, add one thing - targetContract.populateTransaction.targetFunction(...args[, overrides]);\n  console.log(\"Data collected and populating transaction now\");\n  const populatedTransactionOfTargetContract = await targetContract.populateTransaction[\n    methodName\n  ](...params);\n\n  // performing check to resolve the typescript error of populatedTransactionOfTargetContract being undefined\n  if (\n    populatedTransactionOfTargetContract === undefined ||\n    populatedTransactionOfTargetContract.data === undefined ||\n    populatedTransactionOfTargetContract.to === undefined\n  ) {\n    throw Error(\"Populated Transaction of target contract is undefined\");\n  }\n  if (populatedTransactionOfTargetContract.value === undefined) {\n    populatedTransactionOfTargetContract.value = ethers.BigNumber.from(0);\n  }\n\n  console.log(\"Constructing Private proposal parameters\");\n  // step 2. get salt\n  // it's a number, which get's incremented everytime, a new secret/private proposal is enqueued\n  const salt = await delay.salt();\n\n  // step 3. generate secret/private trx hash\n  // it is not a transaction, but a normal call to secret delay\n  // as we are making a call to smart contract, it will take some time\n  const privateTrxHash = await delay.getSecretTransactionHash(\n    populatedTransactionOfTargetContract.to,\n    populatedTransactionOfTargetContract.value,\n    populatedTransactionOfTargetContract.data,\n    operation,\n    salt\n  );\n\n  // we can use ethers to generate the same output\n  // hence to improve performace, ethers should be used.\n  // eslint-disable-next-line\n  const privateTrxHashUsingEthers = ethers.utils.solidityKeccak256(\n    [\"address\", \"uint256\", \"bytes\", \"uint8\", \"uint256\"],\n    [\n      populatedTransactionOfTargetContract.to,\n      populatedTransactionOfTargetContract.value,\n      populatedTransactionOfTargetContract.data,\n      operation,\n      salt,\n    ]\n  );\n\n  // note: privateTrxHashUsingEthers === privateTrxHash\n  //       above mentioned are two different ways of generating the private/secret trasnaction hash,\n  //       both ways will generate same output,\n  //       second way, that is using `ethers` is faster\n\n  // step 4. store details that are needed to recreate the same privateTrxHash on IPFS\n  // note: below are the necessary details that needs to be stored, to recreate the private proposal hash\n  //       if you want to store more details or you want to store it in a different way, you can.\n  //       but ensure, you are able to recreate the private transaction hash,\n  //       as you will need to pass this individual parameters to execute private proposal\n  const privateProposal = {\n    to: populatedTransactionOfTargetContract.to,\n    value: populatedTransactionOfTargetContract.value,\n    data: populatedTransactionOfTargetContract.data,\n    operation: operation,\n    salt: salt,\n  };\n  let concatenatedUserAddress = \"\";\n  let concatendatedBadgeIds = \"\";\n  for (let i = 0; i < badgeIds.length; i++) {\n    if (i === badgeIds.length - 1) {\n      concatenatedUserAddress = `${concatenatedUserAddress}:userAddress`;\n      concatendatedBadgeIds = `${concatendatedBadgeIds}${badgeIds[i]}`;\n    } else {\n      concatenatedUserAddress = `${concatenatedUserAddress}:userAddress,`;\n      concatendatedBadgeIds = `${concatendatedBadgeIds}${badgeIds[i]},`;\n    }\n  }\n\n  // encrypt proposal with LIT\n  const accessControlConditions = [\n    {\n      contractAddress: badger.address,\n      standardContractType: \"ERC1155\",\n      chain: \"celo\",\n      method: \"balanceOfBatch\",\n      parameters: [concatenatedUserAddress, concatendatedBadgeIds],\n      returnValueTest: {\n        comparator: \">\",\n        value: \"0\",\n      },\n    },\n  ];\n\n  const authSig = await LitJsSdk.checkAndSignAuthMessage({ chain: \"celo\" });\n\n  const { encryptedString, symmetricKey } = await LitJsSdk.encryptString(\n    JSON.stringify(privateProposal)\n  );\n\n  const chain = \"celo\";\n  const encryptedSymmetricKey = await client.saveEncryptionKey({\n    accessControlConditions,\n    symmetricKey,\n    authSig,\n    chain,\n  });\n\n  const encryptedSymmetricKeyBase16 = LitJsSdk.uint8arrayToString(\n    encryptedSymmetricKey,\n    \"base16\"\n  );\n\n  const jsonFileName = `Private Proposal ${salt}`;\n\n  const encryptedTransactionProposalCid = await pinFile(\n    encryptedString,\n    jsonFileName\n  );\n\n  const proposalToPin = {\n    encryptedDataPin: encryptedTransactionProposalCid,\n    name: jsonFileName,\n  };\n\n  // currently I'm giving the json file a name to identify on pinata, giving name is purely optional\n  const ipfsURI = await pinJson(proposalToPin, jsonFileName);\n\n  // step 5. generate populated transaction object of secret delay\n  // create params to be passed on to BAC to add proposal\n  // same thing as done above for target contract, but this time, it's secret delay instead of target contract\n  // enqueueSecretTx - used to create private proposal\n  const populatedTransactionOfDelay = await delay.populateTransaction.enqueueSecretTx(\n    privateTrxHash,\n    ipfsURI\n  );\n  // performing check to resolve the typescript error of populatedTransactionOfDelay being undefined\n  if (\n    populatedTransactionOfDelay === undefined ||\n    populatedTransactionOfDelay.data === undefined ||\n    populatedTransactionOfDelay.to === undefined\n  ) {\n    throw Error(\"Populated Transaction of Secret Delay is undefined\");\n  }\n  if (populatedTransactionOfDelay.value === undefined) {\n    populatedTransactionOfDelay.value = ethers.BigNumber.from(0);\n  }\n\n  // step 6. this is the final step in creating private proposal\n  //    invoke `execTransactionFromModule` with defined parameters\n  //    it will tell BAC to add proposal to queue at Secret Delay\n  //    a check is performed at BAC, that only specified delegate is allowed to add proposals\n  const tx = await bac\n    .connect(delegate)\n    .execTransactionFromModule(\n      populatedTransactionOfDelay.to,\n      populatedTransactionOfDelay.value,\n      populatedTransactionOfDelay.data,\n      operation,\n      delegateBadgeId\n    );\n  const receipt = await tx.wait();\n\n  const queueIndex = receipt.events?.filter(\n    (event) => event.event === \"SecretTransactionAdded\"\n  )[0].args?.queueIndex;\n\n  // step 7. go out and enjoy life\n  if (receipt) {\n    console.log(\"Private Proposal created\");\n    return {\n      populatedTransactionOfTargetContract,\n      salt,\n      queueIndex,\n    };\n  } else {\n    throw Error(\"Transaction failed\");\n  }\n};\n\nconst pinFile = async (file, name) => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n  let data = new FormData();\n  data.append(\"file\", file, {\n    filename: \"proposal.bin\",\n    contentType: \"application/octet-stream\",\n  });\n  console.log(data.get(\"file\"));\n  const metadata = JSON.stringify({\n    name: name,\n  });\n  data.append(\"pinataMetadata\", metadata);\n  const res = await axios.post(url, data, {\n    maxBodyLength: \"Infinity\", //this is needed to prevent axios from erroring out with large files\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n      pinata_api_key: process.env.REACT_APP_PINATA_API_Key,\n      pinata_secret_api_key: process.env.REACT_APP_PINATA_API_Secret,\n    },\n  });\n  console.log(\"Encrypted File pinned at:-\", res.data.IpfsHash);\n  return res.data.IpfsHash;\n};\n\nexport const pinJson = async (jsonData, name) => {\n  const data = JSON.stringify({\n    pinataOptions: {\n      cidVersion: 1,\n    },\n    pinataMetadata: {\n      name: name,\n      keyvalues: {\n        customKey: \"customValue\",\n        customKey2: \"customValue2\",\n      },\n    },\n    pinataContent: jsonData,\n  });\n  const config = {\n    method: \"post\",\n    url: \"https://api.pinata.cloud/pinning/pinJSONToIPFS\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${process.env.REACT_APP_JWT}`,\n    },\n    data: data,\n  };\n  const res = await axios(config);\n  console.log(\"JSON pinned at:-\", res.data.IpfsHash);\n  return res.data.IpfsHash;\n};\n","import { contracts } from \"./contracts/celo-test.json\";\nimport {\n  Badger,\n  SecretDelay,\n  BACRoles,\n  ITreasury,\n  IReserve,\n} from \"./contracts/sharedAbi.json\";\nimport { kolektivoBadgeIds, monetaryBadgeIds } from \"./contracts/badgeIds\";\nimport { createPrivateProposal, createPublicProposal } from \"./utils\";\nimport { ethers } from \"ethers\";\n\nconst treasuryContractAddress = \"0x74b06277Cd1efaA9f6595D25AdB54b4530d15BF5\";\nconst reserveContractAddress = \"0xdb2B19C8e3ce01E7f5101652B9dEb500D1298716\";\n\nexport const createTreasuryProposal = async (isSecret, signer) => {\n  let signerAddress;\n  try {\n    signerAddress = await signer.getAddress();\n    console.log(signerAddress);\n  } catch (e) {\n    console.error(e);\n    throw Error(\"Signer not defined\");\n  }\n  // get signer\n  // signer should be treasury delegate\n\n  // log a message stating what type of proposal is being created\n  const message = isSecret\n    ? \"Creating a secret proposal on Kolektivo Delay\"\n    : \"Creating a public proposal on Kolektivo Delay\";\n  console.log(message);\n\n  // instantiate contracts\n  // get kolektivo delay\n  const kolektivoDelay = new ethers.Contract(\n    contracts.kolektivoDelay.address,\n    SecretDelay,\n    signer\n  );\n\n  // get BAC Kolektivo\n  const bacK = new ethers.Contract(contracts.bacK.address, BACRoles, signer);\n\n  // get treasury contract\n  const treasuryContract = new ethers.Contract(\n    treasuryContractAddress,\n    ITreasury,\n    signer\n  );\n\n  // get kolektivo badger address\n  const kolektivoBadger = new ethers.Contract(\n    contracts.kolektivoBadger.address,\n    Badger,\n    signer\n  );\n\n  // get badge ID\n  const treasuryDelegateBadgeId = kolektivoBadgeIds.TREASURY_DELEGATE;\n\n  // verify treasury delgate role\n  const balanceOfTreasuryDelegateBadge = await kolektivoBadger.balanceOf(\n    signerAddress,\n    treasuryDelegateBadgeId\n  );\n  if (balanceOfTreasuryDelegateBadge.eq(0)) {\n    throw Error(\"Signer doesn't hold Treasury Delegate Badge\");\n  }\n\n  // Treasury Delegate Role (Treasury Delegate)\n  // create mock parameters for treasury contract\n  const erc20Address = \"0xe15043634c27384E99a3A4373f1d61bbDFf1da39\";\n  const treasuryTokenOracle = \"0x044bE97050A7225176391d47615CE0667DCBa134\";\n\n  if (isSecret) {\n    await createPrivateProposal(\n      treasuryContract,\n      \"registerERC20\",\n      [erc20Address, treasuryTokenOracle, 1, 1],\n      kolektivoDelay,\n      signer,\n      treasuryDelegateBadgeId,\n      bacK,\n      ethers,\n      kolektivoBadger,\n      [\n        kolektivoBadgeIds.TREASURY_DELEGATE,\n        kolektivoBadgeIds.KOLEKTIVO_MULTI_SIG_MEMBER,\n        kolektivoBadgeIds.TREASURY_VETO_DELEGATE,\n      ]\n    );\n    return;\n  }\n  await createPublicProposal(\n    treasuryContract,\n    \"deregisterERC20\",\n    [erc20Address],\n    kolektivoDelay,\n    signer,\n    treasuryDelegateBadgeId,\n    bacK,\n    ethers\n  );\n};\n\nexport const createReserveProposal = async (isSecret, signer) => {\n  let signerAddress;\n  try {\n    signerAddress = await signer.getAddress();\n    console.log(signerAddress);\n  } catch (e) {\n    console.error(e);\n    throw Error(\"Signer not defined\");\n  }\n  // get signer\n  // signer should be reserve delegate\n\n  // log a message stating what type of proposal is being created\n  const message = isSecret\n    ? \"Creating a secret proposal on Kolektivo Delay\"\n    : \"Creating a public proposal on Kolektivo Delay\";\n  console.log(message);\n\n  // instantiate contracts\n  // get monetary delay\n  const monetaryDelay = new ethers.Contract(\n    contracts.monetaryDelay.address,\n    SecretDelay,\n    signer\n  );\n\n  // get BAC Monetary Delay\n  const bacMD = new ethers.Contract(contracts.bacMD.address, BACRoles, signer);\n\n  // get reserve contract\n  const reserveContract = new ethers.Contract(\n    reserveContractAddress,\n    IReserve,\n    signer\n  );\n\n  // get monetary badger address\n  const monetaryBadger = new ethers.Contract(\n    contracts.monetaryBadger.address,\n    Badger,\n    signer\n  );\n\n  // get badge ID\n  const reserveDelegateBadgeId = monetaryBadgeIds.RESERVE_DELEGATE;\n\n  // verify reserve delgate role\n  const balanceOfReserveDelegateBadge = await monetaryBadger.balanceOf(\n    signerAddress,\n    reserveDelegateBadgeId\n  );\n  if (balanceOfReserveDelegateBadge.eq(0)) {\n    throw Error(\"Signer doesn't hold Reserve Delegate Badge\");\n  }\n\n  // Reserve Delegate Role (Reserve Delegate)\n  // create mock parameters for reserve contract\n  const erc20Address = \"0xe15043634c27384E99a3A4373f1d61bbDFf1da39\";\n  const reserveTokenOracle = \"0x86baecC60c5c1CCe2c73f2Ff42588E6EBce18707\";\n\n  if (isSecret) {\n    await createPrivateProposal(\n      reserveContract,\n      \"registerERC20\",\n      [erc20Address, reserveTokenOracle, 1, 1],\n      monetaryDelay,\n      signer,\n      reserveDelegateBadgeId,\n      bacMD,\n      ethers,\n      monetaryBadger,\n      [\n        monetaryBadgeIds.RESERVE_DELEGATE,\n        monetaryBadgeIds.LOCAL_MULTI_SIG_MEMBER,\n        monetaryBadgeIds.RESERVE_VETO_DELEGATE,\n      ]\n    );\n    return;\n  }\n  await createPublicProposal(\n    reserveContract,\n    \"deregisterERC20\",\n    [erc20Address],\n    monetaryDelay,\n    signer,\n    reserveDelegateBadgeId,\n    bacMD,\n    ethers\n  );\n};\n\nexport const vetoProposalsOnKolektivoDelay = async (signer, newTrxNonce) => {\n  let signerAddress;\n  try {\n    signerAddress = await signer.getAddress();\n    console.log(signerAddress);\n  } catch (e) {\n    console.error(e);\n    throw Error(\"Signer not defined\");\n  }\n\n  // instantiate contracts\n  // get kolektivo delay\n  const kolektivoDelay = new ethers.Contract(\n    contracts.kolektivoDelay.address,\n    SecretDelay,\n    signer\n  );\n\n  // get BAC Kolektivo\n  const bacK = new ethers.Contract(contracts.bacK.address, BACRoles, signer);\n\n  // get kolektivo badger address\n  const kolektivoBadger = new ethers.Contract(\n    contracts.kolektivoBadger.address,\n    Badger,\n    signer\n  );\n\n  // get badge ID\n  const treasuryVetoDelegateBadgeId = kolektivoBadgeIds.TREASURY_VETO_DELEGATE;\n\n  // verify treasury delgate role\n  const balanceOfTreasuryDelegateBadge = await kolektivoBadger.balanceOf(\n    signerAddress,\n    treasuryVetoDelegateBadgeId\n  );\n  if (balanceOfTreasuryDelegateBadge.eq(0)) {\n    throw Error(\"Signer doesn't hold Treasury Delegate Badge\");\n  }\n\n  const populatedSecretDelayTransaction = await kolektivoDelay.populateTransaction.vetoTransactionsTill(\n    newTrxNonce\n  );\n  populatedSecretDelayTransaction.value = ethers.BigNumber.from(0);\n\n  const tx = await bacK.execTransactionFromModule(\n    populatedSecretDelayTransaction.to,\n    populatedSecretDelayTransaction.value,\n    populatedSecretDelayTransaction.data,\n    0,\n    treasuryVetoDelegateBadgeId\n  );\n\n  const receipt = await tx.wait();\n\n  if (receipt) {\n    alert(\"Vetoed\");\n  } else {\n    alert(\"Error\");\n    throw Error(\"Transaction failed\");\n  }\n};\n\nexport const vetoProposalsOnMonetaryDelay = async (signer, newTrxNonce) => {\n  let signerAddress;\n  try {\n    signerAddress = await signer.getAddress();\n    console.log(signerAddress);\n  } catch (e) {\n    console.error(e);\n    throw Error(\"Signer not defined\");\n  }\n\n  // instantiate contracts\n  // get kolektivo delay\n  const monetaryDelay = new ethers.Contract(\n    contracts.monetaryDelay.address,\n    SecretDelay,\n    signer\n  );\n\n  // get BAC Kolektivo\n  const bacMD = new ethers.Contract(contracts.bacMD.address, BACRoles, signer);\n\n  // get kolektivo badger address\n  const monetaryBadger = new ethers.Contract(\n    contracts.monetaryBadger.address,\n    Badger,\n    signer\n  );\n\n  // get badge ID\n  const reserveVetoDelegateBadgeId = monetaryBadgeIds.RESERVE_VETO_DELEGATE;\n\n  // verify treasury delgate role\n  const balanceOfReserveDelegateBadge = await monetaryBadger.balanceOf(\n    signerAddress,\n    reserveVetoDelegateBadgeId\n  );\n  if (balanceOfReserveDelegateBadge.eq(0)) {\n    throw Error(\"Signer doesn't hold Reserve Delegate Badge\");\n  }\n\n  const populatedSecretDelayTransaction = await monetaryDelay.populateTransaction.vetoTransactionsTill(\n    newTrxNonce\n  );\n  populatedSecretDelayTransaction.value = ethers.BigNumber.from(0);\n\n  const tx = await bacMD.execTransactionFromModule(\n    populatedSecretDelayTransaction.to,\n    populatedSecretDelayTransaction.value,\n    populatedSecretDelayTransaction.data,\n    0,\n    reserveVetoDelegateBadgeId\n  );\n\n  const receipt = await tx.wait();\n\n  if (receipt) {\n    alert(\"Vetoed\");\n  } else {\n    alert(\"Error\");\n    throw Error(\"Transaction failed\");\n  }\n};\n\nexport const getMonetaryDelayQueuePointer = async (signer) => {\n  let signerAddress;\n  try {\n    signerAddress = await signer.getAddress();\n  } catch (e) {\n    console.error(e);\n  }\n  const monetaryDelayInstance = new ethers.Contract(\n    contracts.monetaryDelay.address,\n    SecretDelay,\n    signer\n  );\n  const queuePointer = await monetaryDelayInstance.queuePointer({\n    from: signerAddress,\n  });\n  return parseInt(queuePointer.toString());\n};\n\nexport const getKolektivoDelayQueuePointer = async (signer) => {\n  let signerAddress;\n  try {\n    signerAddress = await signer.getAddress();\n  } catch (e) {\n    console.error(e);\n  }\n  const kolektivoDelay = new ethers.Contract(\n    contracts.kolektivoDelay.address,\n    SecretDelay,\n    signer\n  );\n  const queuePointer = await kolektivoDelay.queuePointer({\n    from: signerAddress,\n  });\n  return parseInt(queuePointer.toString());\n};\n","import {\n  shortenAddress,\n  useCall,\n  useEthers,\n  useLookupAddress,\n} from \"@usedapp/core\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Body, Button, Container, Header, Image, Link } from \"./components\";\nimport Form from \"react-bootstrap/Form\";\nimport {\n  createTreasuryProposal,\n  createReserveProposal,\n  vetoProposalsOnKolektivoDelay,\n  vetoProposalsOnMonetaryDelay,\n  getMonetaryDelayQueuePointer,\n  getKolektivoDelayQueuePointer,\n} from \"./createProposal\";\n\nfunction WalletButton() {\n  const [rendered, setRendered] = useState(\"\");\n\n  const { ens } = useLookupAddress();\n  const { account, activateBrowserWallet, deactivate, error } = useEthers();\n\n  useEffect(() => {\n    if (ens) {\n      setRendered(ens);\n    } else if (account) {\n      setRendered(shortenAddress(account));\n    } else {\n      setRendered(\"\");\n    }\n  }, [account, ens, setRendered]);\n\n  useEffect(() => {\n    if (error) {\n      console.error(\"Error while connecting wallet:\", error.message);\n    }\n  }, [error]);\n\n  return (\n    <Button\n      onClick={() => {\n        if (!account) {\n          activateBrowserWallet();\n        } else {\n          deactivate();\n        }\n      }}\n    >\n      {rendered === \"\" && \"Connect Wallet\"}\n      {rendered !== \"\" && rendered}\n    </Button>\n  );\n}\n\nfunction App() {\n  const [selectedState, setSelectedState] = useState();\n  const [indexToVetoOnReserve, setIndexToVetoOnReserve] = useState(0);\n  const [indexToVetoOnTreasury, setIndexToVetoOnTreasury] = useState(0);\n  const [monetaryQueuePointer, setMonetaryQueuePointer] = useState(0);\n  const [kolektivoQueuePointer, setKolektivoQueuePointer] = useState(0);\n  const { library: web3Provider } = useEthers();\n\n  useEffect(() => {\n    if (web3Provider?.getSigner) {\n      getQueuePointers();\n    }\n  }, [web3Provider]);\n\n  const getQueuePointers = async () => {\n    const mQueuePointer = await getMonetaryQueuePointer(web3Provider);\n    const kQueuePointer = await getKolektivoQueuePointer(web3Provider);\n    if(!mQueuePointer){\n      return;\n    }\n    if(!kQueuePointer){\n      return;\n    }\n    setMonetaryQueuePointer(mQueuePointer);\n    setKolektivoQueuePointer(kQueuePointer);\n  };\n\n  function handleSelectedState(event) {\n    const value = event.target.value;\n    setSelectedState(value);\n  }\n\n  async function createProposal() {\n    const currentSelectedState = selectedState;\n    switch (currentSelectedState) {\n      case \"1\":\n        await createTreasuryPublicProposal(web3Provider);\n        break;\n      case \"2\":\n        await createTreasuryPrivateProposal(web3Provider);\n        break;\n      case \"3\":\n        await createReservePublicProposal(web3Provider);\n        break;\n      case \"4\":\n        await createReservePrivateProposal(web3Provider);\n        break;\n    }\n  }\n\n  function handleReserveProposalsIndexChange(event) {\n    const value = event.target.value;\n    setIndexToVetoOnReserve(value);\n  }\n\n  function handleTreasuryProposalIndexChange(event) {\n    const value = event.target.value;\n    setIndexToVetoOnTreasury(value);\n  }\n\n  async function vetoReserveProposals() {\n    const vetoIndex = indexToVetoOnReserve + 1;\n    // veto\n    await vetoProposalOnReserve(web3Provider, vetoIndex);\n\n    setIndexToVetoOnReserve(0);\n  }\n\n  async function vetoTreasuryProposals() {\n    const vetoIndex = indexToVetoOnTreasury + 1;\n    // veto\n    await vetoProposalOnTreasury(web3Provider, vetoIndex);\n\n    setIndexToVetoOnTreasury(0);\n  }\n\n  return (\n    <Container>\n      <Header>\n        <WalletButton />\n      </Header>\n      <Body>\n        <>\n          <Form.Select\n            aria-label=\"Default select example\"\n            onChange={handleSelectedState}\n          >\n            <option>Select what proposal to be created</option>\n            <option value=\"1\">\n              Create \"treasury.deregisterERC20\" public proposal on\n              KolektivoDelay\n            </option>\n            <option value=\"2\">\n              Create \"treasury.registerERC20\" private proposal on KolektivoDelay\n            </option>\n            <option value=\"3\">\n              Create \"reserve.deregisterERC20\" public proposal on MonetaryDelay\n            </option>\n            <option value=\"4\">\n              Create \"reserve.registerERC20\" private proposal on MonetaryDelay\n            </option>\n          </Form.Select>\n          <button onClick={createProposal}>Create</button>\n        </>\n        <>\n          <p>\n            Number of proposals added to monetary delay: {monetaryQueuePointer}\n          </p>\n          <p>\n            Number of proposals added to kolektivo delay:{\" \"}\n            {kolektivoQueuePointer}\n          </p>\n        </>\n        <>\n          <Form.Label htmlFor=\"vetoReserveTransaction\">\n            Transaction index to veto\n          </Form.Label>\n          <Form.Control\n            type=\"number\"\n            id=\"vetoReserveTransaction\"\n            value={indexToVetoOnReserve}\n            onChange={handleReserveProposalsIndexChange}\n          />\n          <button onClick={vetoReserveProposals}>\n            Veto proposal on Monetary Delay\n          </button>\n        </>\n        <>\n          <Form.Label htmlFor=\"vetoTreasuryTransaction\">\n            Transaction index to veto\n          </Form.Label>\n          <Form.Control\n            type=\"number\"\n            id=\"vetoTreasuryTransaction\"\n            value={indexToVetoOnTreasury}\n            onChange={handleTreasuryProposalIndexChange}\n          />\n          <button onClick={vetoTreasuryProposals}>\n            Veto proposal on Kolektivo Delay\n          </button>\n        </>\n      </Body>\n    </Container>\n  );\n}\n\nasync function createTreasuryPublicProposal(web3Provider) {\n  const signer = web3Provider.getSigner();\n  if (signer === undefined) {\n    return;\n  }\n  await createTreasuryProposal(false, signer);\n}\n\nasync function createTreasuryPrivateProposal(web3Provider) {\n  const signer = web3Provider.getSigner();\n  if (signer === undefined) {\n    return;\n  }\n  await createTreasuryProposal(true, signer);\n}\n\nasync function createReservePublicProposal(web3Provider) {\n  const signer = web3Provider.getSigner();\n  if (signer === undefined) {\n    return;\n  }\n  await createReserveProposal(false, signer);\n}\n\nasync function createReservePrivateProposal(web3Provider) {\n  const signer = web3Provider.getSigner();\n  if (signer === undefined) {\n    return;\n  }\n  await createReserveProposal(true, signer);\n}\n\nasync function vetoProposalOnTreasury(web3Provider, newTrxNonce) {\n  const signer = web3Provider.getSigner();\n  if (signer === undefined) {\n    return;\n  }\n  await vetoProposalsOnKolektivoDelay(signer, newTrxNonce);\n}\n\nasync function vetoProposalOnReserve(web3Provider, newTrxNonce) {\n  const signer = web3Provider.getSigner();\n  if (signer === undefined) {\n    return;\n  }\n  await vetoProposalsOnMonetaryDelay(signer, newTrxNonce);\n}\n\nasync function getMonetaryQueuePointer(web3Provider) {\n  const signer = web3Provider.getSigner();\n  if (signer === undefined) {\n    return;\n  }\n  try {\n    return await getMonetaryDelayQueuePointer(signer);\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\nasync function getKolektivoQueuePointer(web3Provider) {\n  const signer = web3Provider.getSigner();\n  if (signer === undefined) {\n    return;\n  }\n  try {\n    return await getKolektivoDelayQueuePointer(signer);\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\nexport default App;\n","import \"./index.css\";\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { DAppProvider, Mainnet } from \"@usedapp/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from \"./App\";\n\n// IMPORTANT, PLEASE READ\n// To avoid disruptions in your app, change this to your own Infura project id.\n// https://infura.io/register\nconst INFURA_PROJECT_ID = \"529670718fd74cd2a041466303daecd7\";\nconst config = {\n  readOnlyChainId: Mainnet.chainId,\n  readOnlyUrls: {\n    [Mainnet.chainId]: \"https://mainnet.infura.io/v3/\" + INFURA_PROJECT_ID,\n  },\n}\n\n// You should replace this url with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <DAppProvider config={config}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}